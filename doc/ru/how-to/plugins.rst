.. _`external plugins`:
.. _`extplugins`:
.. _`using plugins`:

Установка и использование плагинов
======================================

В этом разделе рассказывается об установке и использовании сторонних плагинов. Для написания
собственных плагинов см. :ref:`writing-plugins`.

Установить сторонний плагин можно легко с помощью ``pip``:

.. code-block:: bash

    pip install pytest-NAME
    pip uninstall pytest-NAME

Если плагин установлен, pytest автоматически находит и интегрирует его, активировать его не нужно.

Вот небольшой аннотированный список некоторых популярных плагинов:

.. _`django`: https://www.djangoproject.com/

* `pytest-django <https://pypi.org/project/pytest-django/>`_: написание тестов для
  `django`_ приложений, с использованием интеграции pytest.

* `pytest-twisted <https://pypi.org/project/pytest-twisted/>`_: написание тестов для
  `twisted <http://twistedmatrix.com>`_ приложений, запуск реактора и
  обработка отложенных от тестовых функций.

* `pytest-cov <https://pypi.org/project/pytest-cov/>`__:
  отчетность о покрытии, совместимая с распределенным тестированием.

* `pytest-xdist <https://pypi.org/project/pytest-xdist/>`_:
  для распределения тестов по процессорам и удаленным хостам, для работы в коробочном режиме,
  который позволяет пережить ошибки сегментации, для работы в режиме loopponfailing, автоматического
  повторного запуска упавших тестов при изменениях файлов.

* `pytest-instafail <https://pypi.org/project/pytest-instafail/>`_:
  сообщает о сбоях во время тестового прогона.

* `pytest-bdd <https://pypi.org/project/pytest-bdd/>`_:
  записывает тесты с использованием поведенческого тестирования.

* `pytest-timeout <https://pypi.org/project/pytest-timeout/>`_:
  для проверки тайм-аута на основе функциональных меток или глобальных определений.

* `pytest-pep8 <https://pypi.org/project/pytest-pep8/>`_:
  опция ``--pep8`` с возможностью включить проверку соответствия по PEP8.

* `pytest-flakes <https://pypi.org/project/pytest-flakes/>`_:
  проверка исходного кода с помощью pyflakes.

* `oejskit <https://pypi.org/project/oejskit/>`_:
  плагин для запуска модульных тестов javascript в реальных браузерах.

Чтобы увидеть полный список всех плагинов с их последним статусом тестирования на различных версиях
pytest и Python, посетите :ref:`plugin-list`.

Вы также можете найти больше плагинов через `pytest- pypi.org search`_.

.. _`pytest- pypi.org search`: https://pypi.org/search/?q=pytest-


.. _`available installable plugins`:

Требования/загрузка плагинов в тестовый модуль или файл conftest
-------------------------------------------------------------------

Вы можете затребовать плагины в тестовом модуле или в файле conftest, используя :globalvar:`pytest_plugins`:

.. code-block:: python

    pytest_plugins = ("myapp.testsupport.myplugin",)

Когда загружается тестовый модуль или подключаемый модуль conftest, также будут загружены указанные
подключаемые модули.

.. note::

    Требование плагинов с использованием ``pytest_plugins`` переменная в некорневом файле
    ``conftest.py`` устарело. См.
    :ref:`full explanation <requiring plugins in non-root conftests>`
    в разделе Написание плагинов.

.. note::
   Имя ``pytest_plugins`` зарезервировано и не должно использоваться в качестве имени для настраиваемого
   модуля плагина.


.. _`findpluginname`:

Узнаем, какие плагины активны
------------------------------------

Если вы хотите узнать, какие плагины активны в вашей среде, вы можете ввести:

.. code-block:: bash

    pytest --trace-config

и получите расширенный заголовок теста, который показывает активированные плагины и их названия.
Также будут напечатаны локальные плагины, известные как файлы :ref:`conftest.py <conftest.py plugins>`,
когда они загружаются.

.. _`cmdunregister`:

Деактивация / отмена регистрации плагина по имени
------------------------------------------------------

Вы можете запретить загрузку плагинов или отменить их регистрацию:

.. code-block:: bash

    pytest -p no:NAME

Это означает, что любая последующая попытка активировать загрузку указанного плагина не будет работать.

Если вы хотите безоговорочно отключить плагин для проекта, вы можете добавить эту опцию в свой
файл ``pytest.ini``:

.. code-block:: ini

      [pytest]
      addopts = -p no:NAME

В качестве альтернативы, чтобы отключить его только в определенных средах(например, на сервере CI),
вы можете установить для переменной среды ``PYTEST_ADDOPTS`` значение ``-p no:name``.

См. :ref:`findpluginname` как получить имя плагина.

.. _`builtin plugins`:
