.. _mark:

Маркировка тестовых функций атрибутами
===========================================

Используя ``pytest.mark``, вы можете легко передавать метаданные в ваши тестовые функции. Вы можете найти
полный список встроенных маркеров в :ref:`API Reference<marks ref>`. Или вы можете перечислить все маркеры,
включая встроенные и настраиваемые, с помощью интерфейса командной строки - :code:`pytest --markers`.

Вот некоторые из встроенных маркеров:

* :ref:`usefixtures <usefixtures>` - использовать фикстуры в тестовой функции или классе
* :ref:`filterwarnings <filterwarnings>` - фильтровать определенные предупреждения тестовой функции
* :ref:`skip <skip>` - всегда пропускать тестовую функцию
* :ref:`skipif <skipif>` - пропустить тестовую функцию, если выполняется определенное условие
* :ref:`xfail <xfail>` - помечает тест как  "ожидаемо падающий"(xfail), если выполняется определенное условие
* :ref:`parametrize <parametrizemark>` - выполнять несколько вызовов одной и той же тестовой функции.

Можно с легкостью создавать собственные маркеры или применять маркеры ко всем тестовым классам или модулям.
Эти маркеры могут использоваться плагинами, а также обычно используются для отбора тестов
:ref:`select tests <mark run>` из командной строки с параметром ``-m``.

См. :ref:`mark examples` для примеров, которые также служат в качестве документации.

.. note::

    Маркеры могут применяться только к тестам, не влияя на фикстуры
    :ref:`fixtures <fixtures>`.


Регистрация маркеров
----------------------

Вы можете зарегистрировать пользовательские маркеры в своем файле ``pytest.ini``:

.. code-block:: ini

    [pytest]
    markers =
        slow: marks tests as slow (deselect with '-m "not slow"')
        serial

или в файле ``pyproject.toml``:

.. code-block:: toml

    [tool.pytest.ini_options]
    markers = [
        "slow: marks tests as slow (deselect with '-m \"not slow\"')",
        "serial",
    ]

Обратите внимание, что все, что находится после ``:`` после имени метки, является необязательным описанием.

Кроме того, вы можете программно зарегистрировать новые маркеры в хуке
:ref:`pytest_configure <initialization-hooks>`:

.. code-block:: python

    def pytest_configure(config):
        config.addinivalue_line(
            "markers", "env(name): mark test to run only on named environment"
        )


Зарегистрированные маркеры появляются в тексте справки pytest и не вызывают предупреждений (см. следующий
раздел). Рекомендуется, чтобы сторонние плагины всегда регистрировали свои маркеры
:ref:`register their markers <registering-markers>`.

.. _unknown-marks:

Выявление ошибок на неизвестные маркеры
-----------------------------------------

Незарегистрированные маркеры, применяемые с помощью декоратора ``@pytest.mark.name_of_the_mark``,
будут всегда генерировать предупреждения. Это сделано, чтобы избежать неожиданностей из-за опечаток.
В предыдущем разделе рассказано, как отключить генерацию предупреждений для
настроенных маркеров с помощью регистрации их в ``pytest.ini`` или хуке ``pytest_configure``.

Если применить опцию командной строки ``--strict-markers``, то все неопознанные маркеры,
используемые декоратором ``@pytest.mark.name_of_the_mark``, будут генерировать ошибку.
Для своего проекта эту опцию можно применить принудительно, добавив ``--strict-markers`` в ``addopts``.

.. code-block:: ini

    [pytest]
    addopts = --strict-markers
    markers =
        slow: marks tests as slow (deselect with '-m "not slow"')
        serial
